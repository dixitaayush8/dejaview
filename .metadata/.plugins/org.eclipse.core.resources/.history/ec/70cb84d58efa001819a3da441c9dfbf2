package dejaview;

import java.sql.*;
import java.util.*;

public class DejaView {
	
	private String userName;
	private String password;
	private String serverName;
	private int portNumber;
	private String dbName;
	private boolean isAdmin;
	private String userEmail;
	private String userPassword;
	private int userID;
	
	
	public DejaView(String userName, String password, String serverName, int portNumber, String dbName) {
		this.userName = userName;
		this.password = password;
		this.serverName = serverName;
		this.portNumber = portNumber;
		this.dbName = dbName;
	}
	/**
	 * Get a new database connection
	 * 
	 * @return
	 * @throws SQLException
	 */
	public Connection getConnection() throws SQLException {
		Connection conn = null;
		Properties connectionProps = new Properties();
		connectionProps.put("user", this.userName);
		connectionProps.put("password", this.password);
		
		try {
			conn = DriverManager.getConnection("jdbc:mysql://"
					+ this.serverName + ":" + this.portNumber + "/" + this.dbName,
					connectionProps);
		} catch (SQLException e) {
			System.out.println("Connection Failed! Check output console");
			e.printStackTrace();
		}
		return conn;
	}
	
	
	public boolean getIsAdmin() {
		return this.isAdmin;
	}
	
	
	public void isAdmin(Connection conn) throws SQLException {
		String query = "SELECT isAdmin FROM USER WHERE email=? and password=?";
		PreparedStatement st = conn.prepareStatement(query);
		st.setString(1, this.userEmail);
		st.setString(2, this.userPassword);
		ResultSet rs = st.executeQuery();
		rs.next();
		if(rs.getBoolean(1) == true) {
			this.isAdmin = true;
		}
		else {
			this.isAdmin = false;
		}
	}
	
	public boolean login(Scanner scan, Connection conn) throws SQLException {
		boolean success = false;
		System.out.print("Please enter your email: ");
		this.userEmail = scan.next();
		System.out.print("Please enter your password: ");
		this.userPassword = scan.next();
		
		String query = "SELECT * FROM USER where email=? and password=?";
		PreparedStatement ps = conn.prepareStatement(query);
		ps.setString(1, this.userEmail);
		ps.setString(2, this.userPassword);
		ResultSet rs = ps.executeQuery();
		if(!rs.next()) {
			System.out.println("Login Failed! Please try again");
		}
		else {
			String rsEmail = rs.getString("email");
			String rsPass = rs.getString("password");
			if(this.userEmail.equals(rsEmail) && this.userPassword.equals(rsPass)) {
				System.out.print("\nWelcome " + rs.getString("firstName") + "!");
				isAdmin(conn);
				if(this.isAdmin == true) {
					System.out.println(" You have admin privileges");
				}
				this.userID = rs.getInt("userID");
			}
			
			success = true;
			
		}
		return success;
	}
	
	public int register(Scanner scan, Connection conn) throws SQLException {
		String query = "INSERT INTO USER VALUES(?,?,?,?,?,?,?)";
		String tableCount = "SELECT COUNT(*) FROM USER";
		Statement st = conn.createStatement();
		ResultSet rs = st.executeQuery(tableCount);
		int count = 0;
		while(rs.next()) {
			count = rs.getInt(1) + 1;
		}
		System.out.print("Please enter your First Name: ");
		String firstName = scan.next();
		System.out.print("Please enter your Last Name: ");
		String lastName = scan.next();
		System.out.print("Please enter your email address: ");
		String email = scan.next();
		System.out.print("Please enter your password: ");
		String password = scan.next();
		System.out.print("Please enter optional keyword: ");
		String admin = scan.next();
		
		PreparedStatement ps = conn.prepareStatement(query);
		ps.setInt(1, count);
		ps.setString(2, firstName);
		ps.setString(3, lastName);
		ps.setString(4, email);
		ps.setString(5, password);
		if(admin.equals("admin")) {
			ps.setBoolean(6, true);
		} else {
			ps.setBoolean(6, false);
		}
		ps.setInt(7, 0);
		
		return ps.executeUpdate();
	}
	
	// USER CHOICES AND METHODS 
	
	public void userchoices() {
		System.out.println("");
		System.out.println("User Operations");
		System.out.println("0. Exit program");
		System.out.println("1. Rate a movie");
		System.out.println("2. Search for movie by title");
		System.out.println("3. View your tickets");
		System.out.println("16. Search movie by genre");
		System.out.println("17. Search movie by director");
		System.out.println("18. Search movie by rating number");
		System.out.println("19. Search movie by release year");
		System.out.println("20. Search movies playing in a cinema");
		System.out.println("21. See all movie reviews for a movie");

		System.out.println("22. Check start-time and end-time for a movie");

		System.out.println("More operations are coming soon!");
		System.out.println("");

		System.out.print("Select an operation: ");
	}
	
	
	public void viewUsersTickets(Scanner scan, Connection conn) throws SQLException {
		String query = "SELECT  User.userID, User.firstName, User.lastName, User.email, User.numTickets, Movie.movieTitle, Movie.movieID, Ticket.ticketID, Theater.startTime,Theater.endTime, Cinema.cinemaName FROM TICKET INNER JOIN USER ON User.userID=ticket.userID INNER JOIN MOVIE ON Movie.movieID = ticket.movieID INNER JOIN CINEMA ON Cinema.cinemaID=ticket.cinemaID INNER JOIN THEATER ON Theater.theaterID=ticket.theaterID AND Theater.movieID=ticket.movieID";
		Statement st = conn.createStatement();
		ResultSet rs = st.executeQuery(query);
		System.out.println("All tickets held by users");
		while(rs.next()) {
			System.out.println("");
			System.out.println("UserID: " + rs.getInt(1));
			System.out.println("First Name: " + rs.getString(2));
			System.out.println("Last Name: " + rs.getString(3));
			System.out.println("Email: " + rs.getString(4));
			System.out.println("Number of Tickets: " + rs.getInt(5));
			System.out.println("Movie Title: " + rs.getString(6));
			System.out.println("MovieID: " + rs.getInt(7));
			System.out.println("TicketID: " + rs.getInt(8));
			System.out.println("Start Time: " + rs.getTime(9));
			System.out.println("End Time: " + rs.getTime(10));
			System.out.println("Cinema Name: " + rs.getString(11));
		}
	}
	
	public void viewTickets(Scanner scan, Connection conn) throws SQLException {
		String query = "SELECT  User.userID, User.firstName, User.lastName, User.email, Movie.movieTitle, Movie.movieID, Ticket.ticketID, Theater.startTime,Theater.endTime, Cinema.cinemaName FROM TICKET INNER JOIN USER ON User.userID=ticket.userID INNER JOIN MOVIE ON Movie.movieID = ticket.movieID INNER JOIN CINEMA ON Cinema.cinemaID=ticket.cinemaID INNER JOIN THEATER ON Theater.theaterID=ticket.theaterID AND Theater.movieID=ticket.movieID AND User.email=?";
		PreparedStatement ps = conn.prepareStatement(query);
		ps.setString(1, this.userEmail);
		ResultSet rs = ps.executeQuery();
		System.out.println("");
		System.out.println("You ticket(s)");
		System.out.println("userID\tfirstName\tlastName\temail\tmovieTitle\tmovieID\tticketID\tstartTime\tendTime\tcinemaName");
		int count = 0;
		while(rs.next()) {
			count++;
			System.out.println(rs.getInt(1) + "\t" + rs.getString(2) + "\t" + rs.getString(3) + "\t" + rs.getString(4) + "\t" + rs.getString(5) + "\t" + rs.getInt(6) + "\t" + rs.getInt(7) + "\t" +rs.getTime(8) + "\t" + rs.getTime(9) + "\t" + rs.getString(10) + "\t");
		}
		System.out.println("You have a total of " + count + " ticket(s)");
	}
	
	public void getMoviesByTitle(Scanner scan, Connection conn) throws SQLException {
		String query = "select * from movie where movieTitle=?";
		PreparedStatement ps = conn.prepareStatement(query);
		System.out.print("Please enter the title: ");
		String title = scan.nextLine();
		ps.setString(1, title);
		ResultSet rs = ps.executeQuery();
		int count = 0;
		while(rs.next()) {
			count++;
			System.out.println("\n" + "movieID: " + rs.getInt(1) + "\n" + "movieTitle: " + rs.getString(2) + "\n" + "genre: " + rs.getString(3) + "\n" + "actors: " + rs.getString(4) + "\n" + "director: " + rs.getString(5) + "\n" + "duration: " + rs.getInt(6) + " minutes" + "\n" + "rating: " + rs.getDouble(7) +"/10"+ "\n" + "releaseYear: " +rs.getInt(8));
		}
		if(count == 0) {
			System.out.println("Sorry that movie doesn't exist");
		}
	}
	
	public void getMoviesByGenre(Scanner scan, Connection conn) throws SQLException {
		String query = "select * from movie where genre like ? ORDER BY updated_on DESC";
		PreparedStatement ps = conn.prepareStatement(query);
		System.out.print("Please enter the genre you would like to search: ");
		String genre = scan.next();
		ps.setString(1, "%" + genre + "%");
		ResultSet rs = ps.executeQuery();
		int count = 0;
		while(rs.next()) {
			count++;
			System.out.println("\n" + "movieID: " + rs.getInt(1) + "\n" + "movieTitle: " + rs.getString(2) + "\n" + "genre: " + rs.getString(3) + "\n" + "actors: " + rs.getString(4) + "\n" + "director: " + rs.getString(5) + "\n" + "duration: " + rs.getInt(6) + " minutes" + "\n" + "rating: " + rs.getDouble(7) +"/10"+ "\n" + "releaseYear: " +rs.getInt(8));
		}
		if(count == 0) {
			System.out.println("Sorry movies of that genre don't exist");
		}
	}
	
	public void getMoviesByDirector(Scanner scan, Connection conn) throws SQLException {
		String query = "SELECT * FROM Movie WHERE director = ?";
		PreparedStatement ps = conn.prepareStatement(query);
		System.out.print("Please enter the directors name: ");
		String dName = scan.nextLine();
		ps.setString(1, dName);
		ResultSet rs = ps.executeQuery();
		int count = 0;
		while(rs.next()) {
			count++;
			System.out.println("\n" + "movieID: " + rs.getInt(1) + "\n" + "movieTitle: " + rs.getString(2) + "\n" + "genre: " + rs.getString(3) + "\n" + "actors: " + rs.getString(4) + "\n" + "director: " + rs.getString(5) + "\n" + "duration: " + rs.getInt(6) + " minutes" + "\n" + "rating: " + rs.getDouble(7) +"/10"+ "\n" + "releaseYear: " +rs.getInt(8));
		}
		if(count == 0) {
			System.out.println("Sorry movies by that director don't exist");
		}
	}
	
	public void getMoviesByRating(Scanner scan, Connection conn) throws SQLException {
		String query = "SELECT * FROM Movie WHERE Movie.rating = ?";
		PreparedStatement ps = conn.prepareStatement(query);
		System.out.print("Please enter the rating to search by (1-10): ");
		int rating = scan.nextInt();
		ps.setInt(1, rating);
		ResultSet rs = ps.executeQuery();
		int count = 0;
		while(rs.next()) {
			count++;
			System.out.println("\n" + "movieID: " + rs.getInt(1) + "\n" + "movieTitle: " + rs.getString(2) + "\n" + "genre: " + rs.getString(3) + "\n" + "actors: " + rs.getString(4) + "\n" + "director: " + rs.getString(5) + "\n" + "duration: " + rs.getInt(6) + " minutes" + "\n" + "rating: " + rs.getDouble(7) +"/10"+ "\n" + "releaseYear: " +rs.getInt(8));
		}
		if(count == 0) {
			System.out.println("Sorry movies of that rating don't exist");
		}
	}
	
	public void getMoviesByReleaseYear(Scanner scan, Connection conn) throws SQLException {
		String query = "SELECT * FROM movie WHERE releaseYear = ?";
		PreparedStatement ps = conn.prepareStatement(query);
		System.out.print("Please enter release year: ");
		int year = scan.nextInt();
		ps.setInt(1, year);
		ResultSet rs = ps.executeQuery();
		int count = 0;
		while(rs.next()) {
			count++;
			System.out.println("\n" + "movieID: " + rs.getInt(1) + "\n" + "movieTitle: " + rs.getString(2) + "\n" + "genre: " + rs.getString(3) + "\n" + "actors: " + rs.getString(4) + "\n" + "director: " + rs.getString(5) + "\n" + "duration: " + rs.getInt(6) + " minutes" + "\n" + "rating: " + rs.getDouble(7) +"/10"+ "\n" + "releaseYear: " +rs.getInt(8));
		}
		if(count == 0) {
			System.out.println("Sorry movies of that release year don't exist");
		}
	}
	
	public void getMoviesByCinemaName(Scanner scan, Connection conn) throws SQLException {
		String query = "Select Movie.movieTitle,Movie.movieTitle,Movie.genre,Movie.actors,Movie.director,Movie.duration,Movie.rating,Movie.releaseYear,Theater.cinemaID, Cinema.cinemaName FROM Movie,Theater,Cinema WHERE Movie.movieID = Theater.movieID and Theater.cinemaID = Cinema.cinemaID AND Cinema.cinemaName =?";
		PreparedStatement ps = conn.prepareStatement(query);
		System.out.print("Please enter cinema Name: ");
		String cinemaName = scan.nextLine();
		ps.setString(1, cinemaName);
		ResultSet rs = ps.executeQuery();
		int count = 0;
		while(rs.next()) {
			count++;
			System.out.println("\n" + "movieTitle: " + rs.getString(2) + "\n" + "genre: " + rs.getString(3) + "\n" + "actors: " + rs.getString(4) + "\n" + "director: " + rs.getString(5) + "\n" + "duration: " + rs.getInt(6) + " minutes" + "\n" + "rating: " + rs.getDouble(7) +"/10"+ "\n" + "releaseYear: " +rs.getInt(8));
		}
		if(count == 0) {
			System.out.println("Sorry there are no movies playing in that cinema");
		}
	}
	
	public void getReviewsOfMovieByUsers(Scanner scan, Connection conn) throws SQLException {
		String query = "SELECT Movie.movieTitle, Rating.ratingNumber, User.firstName, User.lastName FROM rating INNER JOIN user USING(userID) INNER JOIN movie USING (movieID) where movie.movieTitle = ?";
		PreparedStatement ps = conn.prepareStatement(query);
		System.out.print("Please enter the movie title: ");
		String movie = scan.nextLine();
		ps.setString(1, movie);
		ResultSet rs = ps.executeQuery();
		int count = 0;
		while(rs.next()) {
			count++;
			System.out.println("\n" + "movieTitle: " + rs.getString(1) + "\n" + "Rating given: " + rs.getInt(2) + "\n" + "First Name: " + rs.getString(3) + "\n" + "Last Name: " + rs.getString(4));
		}
		if(count == 0) {
			System.out.println("Empty");
		}
		
	}
	
	public void getMovies(Connection conn) throws SQLException {
		String query = "select movieID, movieTitle from Movie";
		Statement st = conn.createStatement();
		ResultSet rs = st.executeQuery(query);
		System.out.println("Here are the available movies\n");
		System.out.println("MovieID\t\tMovie Title");
		while(rs.next()) {
			System.out.println(rs.getInt("movieID") + "\t" + rs.getString("movieTitle"));
		}
		System.out.println("");
	}
	
	public void rateMovie(Scanner scan, Connection conn) throws SQLException {
		String query = "INSERT INTO Rating (userID,movieID,ratingNumber) VALUES(?,?,?)";
		getMovies(conn);
		System.out.print("Please enter the movieID of the movie you would like to rate: ");
		int id = scan.nextInt();
		System.out.print("Please enter rating [1-10] you would like to give: ");
		int rating = scan.nextInt();
		PreparedStatement ps = conn.prepareStatement(query);
		ps.setInt(1, this.userID);
		ps.setInt(2, id);
		ps.setInt(3, rating);
		ps.executeUpdate();
		System.out.println("Rating has been successfully added!");
		
	}
	
	// ADMIN CHOICES AND METHODS
	
	public void adminChoices() {
		System.out.println("");
		System.out.println("Admin Operations");
		System.out.println("1001. See all users that have tickets");
		System.out.println("1002. Add a new movie to a theater");
		System.out.println("1003. Delete a movie");
		System.out.println("More operations are coming soon!");
	}
	
	public void deleteMovie(Scanner scan, Connection conn) throws SQLException {
		String query = "Delete from Movie where movieTitle=?";
		PreparedStatement ps = conn.prepareStatement(query);
		getMovies(conn);
		System.out.print("Enter the title of the movie you would like to delete: ");
		String title = scan.nextLine();
		ps.setString(1, title);
		int result = ps.executeUpdate();
		if(result == 1) {
			System.out.println("Successfully deleted " + title);
		}
		else {
			System.out.println("Something went wrong");
		}
		
	}
	
	public void addNewMovieToTheater(Scanner scan, Connection conn) throws SQLException {
		String query = "INSERT INTO theater VALUES(?, ?, ?, ?, ?)";
		PreparedStatement ps = conn.prepareStatement(query);
		System.out.println("Enter the theaterID: ");
		int theaterID = scan.nextInt();
		ps.setInt(1, theaterID);
		System.out.println("Enter the cinemaID: ");
		int cinemaID = scan.nextInt();
		ps.setInt(2, cinemaID);
		System.out.println("Enter the movieID: ");
		int movieID = scan.nextInt();
		ps.setInt(3, movieID);
		System.out.println("Enter the start time[hh:mm:ss]: ");
		String st = scan.next();
		System.out.println("Enter the end time[hh:mm:ss]: ");
		String et = scan.next();
		Time start = Time.valueOf(st);
		Time end = Time.valueOf(et);
		ps.setTime(4, start);
		ps.setTime(5, end);
		int result = ps.executeUpdate();
		if(result == 1) {
			System.out.println("Successfully added Movie to Theater");
		}
		else {
			System.out.println("Unable to add movie to Theater");
		}
	}
	
	

}